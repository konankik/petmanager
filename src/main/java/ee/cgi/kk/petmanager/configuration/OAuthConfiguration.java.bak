package ee.cgi.kk.petmanager.configuration;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder;
import org.springframework.security.oauth2.config.annotation.builders.InMemoryClientDetailsServiceBuilder;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.token.TokenStore;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;

@Configuration
@EnableAuthorizationServer
public class OAuthConfiguration extends AuthorizationServerConfigurerAdapter {

	@Autowired
	@Qualifier("authenticationManagerBean")
	private AuthenticationManager authenticationManager;
	
	@Autowired
	UserDetailsService userDetailsService;

	@Override
	public void configure(final AuthorizationServerSecurityConfigurer oauthServer) throws Exception {
		AuthorizationServerSecurityConfigurer oaSer=oauthServer.tokenKeyAccess("permitAll()").checkTokenAccess("isAuthenticated()");
		System.out.println(oaSer+ " => "+ "this.is oauthServer");
	}

	@Override
	public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
		String  access_token=null;
		ClientDetailsServiceBuilder<InMemoryClientDetailsServiceBuilder>.ClientBuilder cli=clients.inMemory()
		.withClient("fooClientId").secret("secret")
		.authorizedGrantTypes("password", "authorization_code", "refresh_token").scopes("read","write")
		.authorities("ROLE_CLIENT", "ROLE_TRUSTED_CLIENT", "USER","ADMIN")
		.autoApprove(true)
		.accessTokenValiditySeconds(180)//Access token is only valid for 3 minutes.
        .refreshTokenValiditySeconds(600);//Refresh token is only valid for 10 minutes.;
	System.out.println("this is client");
	
	}

    @Override
    public void configure(final AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
    	AuthorizationServerEndpointsConfigurer end=endpoints.tokenStore(tokenStore()).authenticationManager(authenticationManager).accessTokenConverter(defaultAccessTokenConverter())
    	.userDetailsService(userDetailsService);
    	System.out.println(end+ " => "+ "this.is endpoints");
    
    }

	
	  @Bean public TokenStore tokenStore(){ return new
	  JwtTokenStore(defaultAccessTokenConverter()); }
	  
	  @Bean public JwtAccessTokenConverter defaultAccessTokenConverter() {
	  JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
	  converter.setSigningKey("123");
	  return converter; 
	  }
	 
}
